# Урок по работе со строками

poem = """Я помню чудное мгновенье:
Передо мной явилась ты,
Как мимолетное виденье,
Как гений чистой красоты.
"""
print(poem)

# "Сырая строка", то есть отмена экранирующих знаков, например в ссылке.
s = r"C:\Users\mihail\AppData"
print(s)

# Конкингинация (склеивание) строк
s1 = "Hello, "
s2 = "world!"
s3 = s1 + s2
print(s3)

name = "John"
age = 20
print("My name is " + name + ". I am " + str(age) + " years old.")
print(name * 5)

# Индексация строк. Нумерация символов слева направо начиная с нуля. Или со знаком "-" справа налево начиная с -1.
s4 = "Hello world!"
print(s4[-12])
print(s4[0])
print(s4[7])

# Срез нескольких символов из строк. [x:y:z], где х - начало среза, у - конец среза и z - шаг
print(s4[0:5])  # Hello
print(s4[-12:-5])  # Hello
print(s4[0:7])  # Hello w
print(s4[6:])  # world! Опуская последний аргумент у, получаем до конца строки. Шаг по умолчанию = 1
print(s4[::2])  # Hlowrd Аргумент х и у по умолчанию (начало и конец всей строки), шаг 2 - через букву
# !dlrow olleH Аргумент х и у по умолчанию (начало и конец всей строки), шаг "-1" - инверсия (зеркалирование)
print(s4[::-1])
# Helloworld! Удалили пробел между словами в строке и склеяли.
print(s4[:5] + s4[6:])

# Методы строк
s5 = "hello world!"
s6 = s5.capitalize()  # Hello world! Переводит первый символ строки в верхний регистр, а все остальные в нижний
print(s5, s6)
print(len(s5))  # Выводит длину строки по количеству символов
s7 = s5.center(30)  # Возвращает отцентрованную строку, по краям которой стоит символ fill (пробел по умолчанию)
s8 = s5.center(30, "!")  # Возвращает отцентрованную строку, по краям которой стоит символ !!!
print(s7, s8)  # hello world!          !!!!!!!!!hello world!!!!!!!!!!
# Выводит количество указанных символов в стироке (по умолчанию - вся строка просматривается, но можно ограничить)
s9 = s5.count("l")
# Выводит количество указанных символов в стироке в диапазоне поиска от 0 до 6 символа
s10 = s5.count("l", 0, 6)
# Ищет указанный символ в строке и её номер индекса в строке при первом обнаружении. Если символа нет, то выводит: -1
print(s9, s10)  # 3 2
s11 = s5.find("w")
# Ищет указанный символ в строке и заменяет на указанный далее символ
print(s11)  # 6
s12 = s5.replace("l", "t")
print(s12)  # hetto wortd!
# Ищет символ разедлителя (по умолчанию - пробел) в строке и нарезает строку на отдельные слова. Мы получаем список.
s13 = s5.split()
print(s13)  # ['hello', 'world!']

# Форматирование строк
name1 = "John"
age1 = 30
# Стандартный вариант. Вывод: My name is John. I am 30 years old.
print("My name is " + name1 + ". I am " + str(age1) + " years old.")
# Позиционные маркеры в жёсктой последовательности. s-строка d-цифра,f-дробная цифра
# (%.2f - два знака после запятой выводит)
print("My name is %s. I am %d years old." % (name1, age1))
# Новый синтаксис позиционных маркеров в жёсктой последовательности.
print("My name is {}. I am {} years old.".format(name1, age1))
# Тоже самое c множественным обращением к позициям. Нумерация с 0. Вывод: My name is John. I am 30 years old. John 30
print("My name is {0}. I am {1} years old. {0} {1}".format(name1, age1))
# Новый синтаксис именных маркеров. Именные маркеры name, age присваиваются нужным переменным.
print("My name is {name}. I am {age} years old.".format(name=name1, age=age1))
# Новейший синтаксис с помощью функции f-string, которая заставляет видеть переменные в строке.
# Указываем f перед строкой и в строке указываем в фигурных скобках нужные переменные.
# Мы также можем делать математические операции нужных переменных.
print(f"My name is {name1}. I am {age1} years old.")
print(f"My name is {name1}. I am {age1 + 11} years old.")
